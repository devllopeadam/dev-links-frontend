# Project Information
- Current working directory: `C:\Users\PC\AppData\Local\Programs\Microsoft VS Code`
- Workspace root: `c:\Users\PC\Desktop\dev-links\frontend`

## High Value Files
### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\layout.tsx
- Reason: This is likely the main layout component, which could provide insights into the overall structure of the application and how data flows through different parts of the UI.
- File size: 980 bytes

```
import "./globals.css";
import { Toaster } from 'react-hot-toast';
import { UserSessionProvider } from "./context/UserSessionContext";
import { UserDataProvider } from "./context/UserDataContext";
import { Instrument_Sans } from 'next/font/google';

const instrument = Instrument_Sans({
  subsets: ['latin'],
})

export const metadata = {
  title: "Dev Links App",
  description: "Dev Links",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <link
          rel="icon"
          href="/favicon.png"
          type="image/<generated>"
          sizes="<generated>"
        />
      </head>
      <body className={instrument.className}>
        <UserSessionProvider>
          <UserDataProvider>
            {children}
          </UserDataProvider>
        </UserSessionProvider>
        <Toaster />
      </body>
    </html>
  );
}
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(auth)\layout.tsx
- Reason: This layout file for the auth section may contain important information about how user authentication data is handled and passed through the system.
- File size: 774 bytes

```
import Image from "next/image";
import Link from "next/link";
import { isAuthenticated } from "../cookies";
import { redirect } from "next/navigation";
import { UserDataProvider } from "../context/UserDataContext";

export default async function AuthLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const isAuth = await isAuthenticated();

  if (isAuth) {
    setTimeout(() => {
      redirect("/links");
    }, 1000);
  }

  return (
    <main className="bg-[#fafafa] flex items-center flex-col gap-10 w-full min-h-screen">
      <Link href={"/links"}>
        <Image src="/images/logo-devlinks-large.svg" width={185} height={50} alt="Dev Links Logo" className="mt-12" />
      </Link>
      {children}
    </main>
  );
}
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(auth)\login\page.tsx
- Reason: The login page is crucial for understanding how user credentials are collected and sent through the system.
- File size: 4615 bytes

```
```typescript
"use client"
import { SubmitHandler, useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { loginSchema } from "@/app/validation";
import { LOGIN_FORM } from "@/app/constants";
import { Input } from "@/app/components/ui/input";
import { Button } from "@/app/components/ui/button";
import toast from "react-hot-toast";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { AxiosError } from "axios";
import { IErrorResponse, Platform, Link as TLink } from "@/app/interfaces";
import axiosInstance from "@/app/config/axios.config";
import { fillCookies } from "@/app/cookies";
import { useUserSession } from "@/app/context/UserSessionContext";
import { useEffect } from "react";
import { useUserData } from "@/app/context/UserDataContext";

interface IFormData {
  email: string,
  password: string,
}

export default function Login() {
  const { userSession, setUserSession } = useUserSession();
  const { userData, setUserData } = useUserData();
  useEffect(() => {
    userSession.userId && axiosInstance.get(`/users/${userSession.userId}?populate=*`).then((response) => {
      const { status, data } = response;
      if (status === 200) {
        const userLinks: TLink[] = data.links.map((linkData: any) => ({
          id: linkData.id,
          platform: linkData.platform as Platform,
          link: linkData.link,
        }));
        setUserData(prev => ({
          ...prev,
          user: {
            ...prev!.user,
            image: data?.imageUrl ? `http://localhost:1337${data.imageUrl}` : prev!.user.image,
            firstName: data?.firstName ?? prev!.user.firstName,
            lastName: data?.lastName ?? prev!.user.lastName,
            email: data?.email ?? prev!.user.email,
            id: data?.id ?? prev!.user.id,
          },
          links: userLinks
        }));
      }
    })
  }, [userSession.userId]);
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: yupResolver(loginSchema), mode: "onBlur"
  })
  
  const onSubmit: SubmitHandler<IFormData> = async ({ email, password }) => {
    try {
      const { status, data } = await axiosInstance.post("/auth/local/", {
        identifier: email,
        password: password,
      });
      if (status == 200) {
        toast.success("Registration successfully", {
          position: "top-center",
          duration: 1000,
          style: {
            padding: "15px 30px",
            backgroundColor: "white",
            color: "black",
            width: "fit-content",
          },
        });
        fillCookies(data.jwt, data.user.id);
        setUserSession({ jwt: data.jwt, userId: data.user.id });
        setTimeout(() => {
          router.push("/links");
        }, 1000);
      }
    } catch (error) {
      const errorObj = error as AxiosError<IErrorResponse>;
      toast.error(`${errorObj.response?.data.error.message}`, {
        position: "top-center",
        duration: 1500,
        style: {
          backgroundColor: "white",
          color: "black",
          width: "fit-content",
        },
      });
    }
  }

  return (
    <div className="flex flex-col gap-4 sm:gap-7 bg-white rounded-xl shadow-sm p-6 sm:p-[38px] w-[92%] sm:w-[476px] mt-5">
      <header className='flex flex-col gap-2'>
        <h1
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(auth)\register\page.tsx
- Reason: The registration page will show how new user data is collected and processed in the system.
- File size: 3104 bytes

```
```javascript
import { SubmitHandler, useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { registerSchema } from "@/app/validation";
import { REGISTER_FORM } from "@/app/constants";
import { Input } from "@/app/components/ui/input";
import { Button } from "@/app/components/ui/button";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";
import axiosInstance from "@/app/config/axios.config";
import { AxiosError } from "axios";
import { IErrorResponse } from "@/app/interfaces";

interface IFormData {
  email: string,
  username: string,
  password: string,
}

export default function Register() {
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: yupResolver(registerSchema), mode: "onBlur"
  })

  const onSubmit: SubmitHandler<IFormData> = async (data) => {
    try {
      const { status } = await axiosInstance.post("/auth/local/register", data);
      if (status == 200) {
        toast.success("Registration successfully", {
          position: "top-center",
          duration: 1500,
          style: {
            padding: "15px 30px",
            backgroundColor: "white",
            color: "black",
            width: "fit-content",
          },
        });
        setTimeout(() => {
          router.push("/login");
        }, 1000);
      }
    } catch (error) {
      const errorObj = error as AxiosError<IErrorResponse>;
      toast.error(`${errorObj.response?.data.error.message}`, {
        position: "top-center",
        duration: 1500,
        style: {
          backgroundColor: "white",
          color: "black",
          width: "fit-content",
        },
      });
    }
  }

  return (
    <div className="flex flex-col gap-4 sm:gap-7 bg-white rounded-xl shadow-sm p-6 sm:p-[38px] w-[92%] sm:w-[476px]">
      <header className='flex flex-col gap-2'>
        <h1 className='font-bold text-[24px] text-dark-gray'>Register</h1>
        <p className='text-accent-gray'>Add your details below to create a new account</p>
      </header>
      <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-5">
        <div className="flex flex-col gap-5">
          {REGISTER_FORM.map((e, i) => {
            return (
              <Input
                key={i}
                id={e.name}
                error={errors[e.name]?.message!}
                {...e}
                {...register(e.name)}
              />
            )
          })}
          <Button isLoading={isSubmitting}>Register</Button>
        </div>
        <div className="flex flex-col gap-4">
          <div className="flex items-center justify-center gap-1">
            <p className="text-accent-gray font-">You have an account?</p>
            <Link href={"/login"} className="text-accent-purple font-">Login</Link>
          </div>
        </div>
      </form>
    </div>
  )
}
```
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(user)\layout.tsx
- Reason: This layout file for the user section may reveal how authenticated user data is managed and distributed to child components.
- File size: 965 bytes

```
```javascript
"use client"
import React, { useEffect } from "react";
import Header from "../components/Header";
import { usePathname } from 'next/navigation';
import FinalPreview from "../components/FinalPreview";

export const isActive = (label: string, pathname: string) => label === pathname.slice(1);

const UserLayout = ({ children }: { children: React.ReactNode }) => {
  const pathname = usePathname();
  useEffect(() => {
    console.log(pathname);
  }, []);
  return (
    <div className={`relative 2xl:max-w-[1600px] mx-auto p-4 sm:p-6 ${pathname !== "/preview" && "bg-[#fafafa] lg:grid-cols-[1.5fr_2fr]"} w-full min-h-screen grid grid-rows-[80px_1fr] grid-cols-1 lg:gap-6 gap-y-4 sm:gap-y-6`}>
      {
        pathname === "/preview" && (
          <div className="absolute top-0 left-0 bg-accent-purple w-full h-[330px] rounded-b-[35px]"></div>
        )
      }
      <Header />
      {children}
    </div>
  );
};

export default UserLayout;
```
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(user)\links\page.tsx
- Reason: This page likely handles user-specific link data, showing how it's fetched and displayed.
- File size: 3525 bytes

```
import AddLink from "@/app/components/AddLink";
import LinksHandler from "@/app/components/LinksHandler";
import EmptyLinks from "@/app/components/EmptyLinks";
import { useUserData } from "@/app/context/UserDataContext";
import { useUserSession } from "@/app/context/UserSessionContext";
import { useEffect, useState } from "react";

const Links = () => {
  const { userData, setUserData } = useUserData();
  const { userSession } = useUserSession();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    userSession.userId && axiosInstance.get(`/users/${userSession.userId}?populate=*`).then((response) => {
      const { status, data } = response;
      if (status === 200) {
        setIsLoading(false);
        const userLinks = data.links.map((linkData: any) => ({
          id: linkData.id,
          platform: linkData.platform,
          link: linkData.link,
        }));
        setUserData(prev => ({
          ...prev,
          user: {
            ...prev!.user,
            image: data?.imageUrl ? `http://localhost:1337${data.imageUrl}` : prev!.user.image,
            firstName: data?.firstName ?? prev!.user.firstName,
            lastName: data?.lastName ?? prev!.user.lastName,
            email: data?.email ?? prev!.user.email,
            id: data?.id ?? prev!.user.id,
          },
          links: userLinks
        }));
      }
    })
  }, [userSession.userId]);

  return (
    <>
      {
        !isLoading ?
          <>
            <AddLink />
            {
              userData?.links?.length
                ? <LinksHandler />
                : <EmptyLinks />
            }
          </>
          :
          <>
            // [non-essential code removed]
          </>
      }
    </>
  )
};

export default Links;
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\(user)\profile\page.tsx
- Reason: The profile page would demonstrate how user data is retrieved and potentially updated in the system.
- File size: 2057 bytes

```
import PhoneReview from "@/app/components/PhoneReview";
import ProfileDetailsForm from "@/app/components/ProfileDetailsForm";
import { useUserData } from "@/app/context/UserDataContext";
import { useEffect, useState } from "react";
import axiosInstance from "@/app/config/axios.config";
import { useUserSession } from "@/app/context/UserSessionContext";

const Profile = () => {
  const { setUserData } = useUserData();
  const { userSession } = useUserSession();

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    userSession.userId && axiosInstance.get(`/users/${userSession.userId}?populate=*`).then((response) => {
      const { status, data } = response;
      if (status === 200) {
        setIsLoading(false);
        const userLinks = data.links.map((linkData: any) => ({
          id: linkData.id,
          platform: linkData.platform,
          link: linkData.link,
        }));
        setUserData(prev => ({
          ...prev,
          user: {
            ...prev!.user,
            image: data?.imageUrl ? `http://localhost:1337${data.imageUrl}` : prev!.user.image,
            firstName: data?.firstName ?? prev!.user.firstName,
            lastName: data?.lastName ?? prev!.user.lastName,
            email: data?.email ?? prev!.user.email,
            id: data?.id ?? prev!.user.id,
          },
          links: userLinks
        }));
      }
    })
  }, [userSession.userId]);

  return (
    <>
      <div className="bg-white rounded-xl shadow-sm lg:flex hidden items-center justify-center py-14">
        {
          !isLoading ?
            <PhoneReview />
            : <div className="animate-pulse">
              <div className="w-[308px] h-[632px] bg-gray-200 rounded-[35px]"></div>
            </div>
        }
      </div>
      <ProfileDetailsForm isLoading={isLoading} />
    </>
  )
};

export default Profile;
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\components\AddLink.tsx
- Reason: This component might show how new link data is collected and sent to the backend.
- File size: 6468 bytes

```
```typescript
'use client'
import { platform_bases, platforms } from "../constants"
import { Button } from "./ui/button"
import { useEffect, useMemo, useState } from "react";
import { Input } from "./ui/input";
import { SubmitHandler, useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { isValidURLWithUsername } from "../validation";
import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "./ui/alert-dialog";
import {
  Select,
  SelectContent,
  SelectTrigger,
  SelectValue,
  SelectItem
} from "./ui/select";
import { useUserData } from "../context/UserDataContext";
import { IPlatform, Link, Platform } from "../interfaces";
import axiosInstance from "../config/axios.config";
import { useUserSession } from "../context/UserSessionContext";
import toast from "react-hot-toast";

interface IFormData {
  platform: string,
  link: string,
}

const AddLink = () => {
  const [platform, setPlatform] = useState<string>();
  const [open, setOpen] = useState<boolean>(false);
  const { userData, setUserData } = useUserData();
  const { userSession } = useUserSession();
  const [filtredPlatforms, setFiltredPlatforms] = useState<IPlatform[]>();

  useEffect(() => {
    const platformsLinks = userData?.links.map(link => link.platform);
    const fPlatforms = platforms.filter(platform => !platformsLinks?.includes(platform.name));
    setFiltredPlatforms(fPlatforms);
  }, [platform, userData]);

  const platformSchema = useMemo(() =>
    yup.object({
      platform: yup
        .string()
        .required("Can't be empty"),
      link: yup
        .string()
        .required("Can't be empty")
        .test('is-valid-url-with-username', "Invalid platform account", function (value) {
          const { platform } = this.parent;
          const baseURL = platform_bases[platform as keyof typeof platform_bases];
          return baseURL ? isValidURLWithUsername(value!, baseURL) : false;
        }),
    }).required()
    , [platform]);

  const {
    register,
    handleSubmit,
    setValue,
    trigger,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: yupResolver(platformSchema), mode: "all"
  })

  useEffect(() => {
    if (platform) {
      const defaultValue = platforms.find(p => p.name === platform)?.defaultValue!;
      setValue("link", defaultValue);
    }
  }, [platform, setValue, trigger]);

  const onSubmit: SubmitHandler<IFormData> = async ({ link, platform }) => {
    try {
      const { status, data: uploadedLink } = await axiosInstance.post("/links", { data: { platform, link, user: userSession.userId } }, {
        headers: {
          Authorization: `Bearer ${userSession?.jwt}`,
        },
      });
      if (status === 200) {
        setUserData(prev => ({
          ...prev!,
          user: {
            ...prev!.user,
          },
          links: [
            ...(prev!.links as Link[]),
            {
              id: uploadedLink.data.id,
              platform: uploadedLink.data.attributes.platform as Platform,
              link: uploadedLink.data.attributes.link,
            }
          ]
        }));
        toast.success("Link Added successfully", {
          position: "top-center",
          duration: 1000,
          style: {
            padding: "15px 30px",
            backgroundColor: "white",
            color: "black",
            width: "fit-content",
          },
        });
      }
    } catch (error) {
      toast.
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\components\LinksHandler.tsx
- Reason: This component likely manages the overall flow of link data in the application.
- File size: 1213 bytes

```
use client";
import { useEffect, useState } from "react";
import { useUserData } from "../context/UserDataContext";
import CustmizeLink from "./CustmizeLink";
import { ScrollArea } from "./ui/scroll-area";
import { Reorder } from "framer-motion";
import { Link } from "../interfaces";

const LinksHandler = () => {
  const { userData, setUserData } = useUserData();
  const [links, setLinks] = useState<Link[]>();

  useEffect(() => {
    setLinks(userData?.links);
  }, [])

  useEffect(() => {
    if (links) {
      setTimeout(() => {
        setUserData(prev => ({
          ...prev!,
          user: {
            ...prev!.user,
          },
          links: links!
        }));
      }, 1000);
    }
  }, [links]);

  return links && (
    <ScrollArea className='h-[600px]'>
      <Reorder.Group axis="y" onReorder={setLinks} values={links} className="flex flex-col gap-5">
        {links.map((x, i) => (
          <CustmizeLink
            key={x.id}
            item={x}
            hashId={i + 1}
          />
        ))}
      </Reorder.Group>
    </ScrollArea>
  );
};

export default LinksHandler;
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\components\ProfileForm.tsx
- Reason: This form component would reveal how user profile data is collected and potentially updated.
- File size: 2943 bytes

```
import { profileSchema } from "@/app/validation";
import { yupResolver } from "@hookform/resolvers/yup";
import { SubmitHandler, useForm } from "react-hook-form";
import { PROFILE_FORM } from "../constants";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { useUserData } from "../context/UserDataContext";
import axiosInstance from "../config/axios.config";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";
import { useUserSession } from "../context/UserSessionContext";

interface IFormData {
  firstName: string,
  lastName: string,
  email: string,
}

const ProfileForm = () => {
  const { userData, setUserData } = useUserData();
  const { userSession } = useUserSession();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: yupResolver(profileSchema), mode: "all", values: userData as any,
  })

  const onSubmit: SubmitHandler<IFormData> = async (data) => {
    try {
      const { status, data: res } = await axiosInstance.put(`/users/${userSession.userId}`, data);
      if (status === 200) {
        setUserData(prev => ({
          ...prev,
          user: {
            ...prev?.user,
            firstName: data?.firstName,
            lastName: data?.lastName,
            email: data?.email
          },
          links: prev!.links
        }));
        toast.success("Details Changed successfully", {
          position: "top-center",
          duration: 1500,
          style: {
            padding: "15px 30px",
            backgroundColor: "white",
            color: "black",
            width: "fit-content",
          },
        });
        setTimeout(() => {
          router.push("/preview");
        }, 600);
      }
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-5">
        <div className="flex flex-col gap-5 p-5 bg-[#fafafa] rounded-xl mb-10">
          {
            PROFILE_FORM.map((e, i) => {
              return (
                <Input
                  defaultValue={userData?.user![e.name] as string}
                  className="md:!flex-row !flex-col md:!items-center !items-start md:!justify-between [&>div]:w-full md:[&>div]:w-[80%]"
                  key={i}
                  id={e.name}
                  error={errors[e.name]?.message! as any}
                  {...e}
                  {...register(e.name)}
                />
              )
            })
          }
        </div>
        <Button isLoading={isSubmitting} className="self-end px-4 md:px-10">Save</Button>
      </form>
    </>
  )
}

export default ProfileForm
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\config\axios.config.ts
- Reason: This file likely contains API configuration, crucial for understanding how data is sent to and received from the backend.
- File size: 147 bytes

```
import axios from "axios";

const axiosInstance = axios.create({
  baseURL: "http://localhost:1337/api",
});

export default axiosInstance;
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\context\UserDataContext.tsx
- Reason: This context provider is likely responsible for managing and distributing user data throughout the application.
- File size: 1041 bytes

```
use client";
import React, { createContext, useContext, useState } from "react";
import { IUserData } from "../interfaces";

interface IUserDataContext {
  userData: IUserData | null;
  setUserData: React.Dispatch<React.SetStateAction<IUserData | null>>;
}

const userDataContext = createContext<IUserDataContext | undefined>(undefined);

const useUserData = () => {
  const context = useContext(userDataContext);
  if (!context) {
    throw new Error("useUserData must be used within a UserDataContext");
  }
  return context;
}

const UserDataProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [userData, setUserData] = useState<IUserData | null>({
    user: {
      id: "",
      image: "",
      firstName: "",
      lastName: "",
      email: ""
    }, links: []
  });
  const values = { userData, setUserData };

  return (
    <userDataContext.Provider value={values}>
      {children}
    </userDataContext.Provider>
  )
}

export { UserDataProvider, useUserData };
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\context\UserSessionContext.tsx
- Reason: This context provider probably manages the user's session data, important for understanding authentication flow.
- File size: 1331 bytes

```
import { createContext, useContext, useEffect, useState } from "react"
import { getCookies } from "../cookies";

interface IUserSession {
  jwt: string,
  userId: string,
}
interface IUserSessionContext {
  userSession: IUserSession,
  setUserSession: React.Dispatch<React.SetStateAction<IUserSession>>;
}

const userSessionContext = createContext<IUserSessionContext | undefined>(undefined);

const useUserSession = () => {
  const context = useContext(userSessionContext);
  if (!context) {
    throw new Error("useUserData must be used within a UserDataContext");
  }
  return context;
}

const UserSessionProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [userSession, setUserSession] = useState<IUserSession>({ jwt: "", userId: "" });
  const values = { userSession, setUserSession };

  useEffect(() => {
    getCookies().then((cookies) => {
      if (cookies && cookies.length >= 2) {
        setUserSession((prev) => ({
          ...prev,
          jwt: cookies[0]?.value || "",
          userId: cookies[1]?.value || "",
        }));
      }
    });
  }, []);

  return (
    <userSessionContext.Provider value={values}>
      {children}
    </userSessionContext.Provider>
  )
}

export { UserSessionProvider, useUserSession };
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\cookies\index.ts
- Reason: This file likely handles cookie management, which could be crucial for maintaining user sessions and storing user data.
- File size: 639 bytes

```
```javascript
"use server";

import { cookies } from "next/headers";

export const fillCookies = (jwt: string, userId: number) => {
  cookies().set({
    name: "jwt",
    value: jwt,
    httpOnly: true,
    secure: true,
    path: "/",
  });
  cookies().set({
    name: "userId",
    value: userId as unknown as string,
    httpOnly: true,
    secure: true,
    path: "/",
  });
};

export async function isAuthenticated() {
  return cookies().has("jwt");
}

export const logout = () => {
  cookies().delete("jwt");
  cookies().delete("userId");
};

export const getCookies = async () => {
  return cookies().getAll();
};
```
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\interfaces\index.ts
- Reason: This file probably contains type definitions for the data structures used throughout the application, providing insights into the shape of data flowing through the system.
- File size: 1268 bytes

```
export interface ILoginInput {
  placeholder: string;
  label: string;
  type: string;
  icon: string;
  name: "email" | "password";
}

export interface IRegisterInput {
  placeholder: string;
  label: string;
  type: string;
  icon: string;
  name: "email" | "username" | "password";
}

export interface IProfileInput {
  placeholder: string;
  label: string;
  type: string;
  icon?: string;
  name: "firstName" | "lastName" | "email";
}

export interface IErrorResponse {
  error: {
    details?: {
      errors: {
        message: string;
      }[];
    };
    message?: string;
  };
}

export interface IPlatform {
  icon: string;
  name: Platform;
  defaultValue: string;
}

export type Link = {
  id: number;
  platform: Platform;
  link: string;
};

export type User = {
  id?: string | null;
  image?: string | null;
  firstName?: string | null;
  lastName?: string;
  email?: string | null;
};

export interface IUserData {
  user: User;
  links: Link[];
}

export type Platform =
  | "Github"
  | "Frontend Mentor"
  | "Twitter"
  | "LinkedIn"
  | "Youtube"
  | "Facebook"
  | "Twitch"
  | "Codewars"
  | "FreeCodeCamp"
  | "GitLab"
  | "Hashnode"
  | "Dev.To"
  | "Stack Overflow";
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\validation\index.ts
- Reason: This file likely contains validation logic, which is important for understanding how data is sanitized and verified as it flows through the system.
- File size: 1467 bytes

```
import * as yup from "yup";

export const loginSchema = yup
  .object({
    email: yup
    .string()
    .required("Can't be empty")
    .email("Invalid email Format"),
    password: yup
      .string()
      .required("Can't be empty")
      .min(4, "At least 4 characters"),
  })
  .required();

export const registerSchema = yup
  .object({
    username: yup
      .string()
      .required("Can't be empty")
      .min(4, "At least 4 characters"),
    email: yup
      .string()
      .required("Can't be empty")
      .email("Invalid email Format"),
    password: yup
      .string()
      .required("Can't be empty")
      .min(6, "At least 6 characters"),
  })
  .required();

export const isValidURLWithUsername = (value: string, base: string) => {
  if (!value.startsWith(base)) return false; // Must start with the base URL
  const path = value.slice(base.length); // Extract the part after the base URL
  return path.length > 4 && !path.includes("/") && path !== ""; // Ensure there is some path and it's valid
};
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\middleware.ts
- Reason: The middleware file could contain important logic for processing requests and responses, potentially affecting how data flows through the application.
- File size: 414 bytes

```
import { NextRequest, NextResponse } from "next/server";
import { isAuthenticated } from "./app/cookies";

export async function middleware(req: NextRequest) {
  const isLoggedIn = await isAuthenticated();
  if (!isLoggedIn) {
    return NextResponse.redirect(new URL("/login", req.url));
  }
  return NextResponse.next();
}

export const config = {
  matcher: ["/links", "/profile", "/preview"],
};
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\components\FinalPreview.tsx
- Reason: This component might show how all the collected user and link data is combined for a final display, giving insights into data aggregation.
- File size: 320 bytes

```
not relevant
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\lib\utils.ts
- Reason: This utility file might contain helper functions that are used throughout the application for data manipulation or processing.
- File size: 172 bytes

```
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

### ..\..\..\AppData\Local\Programs\Microsoft VS Code\app\constants\index.ts
- Reason: This file likely contains important constant values that could affect how data is processed or displayed throughout the application.
- File size: 6812 bytes

```
import {
  ILoginInput,
  IPlatform,
  IProfileInput,
  IRegisterInput,
  Platform,
} from "../interfaces";

import GithubIconGray from "@/public/images/icon-github-gray.svg";
import FrontEndMentorIconGray from "@/public/images/icon-frontend-mentor-gray.svg";
import TwitterIconGray from "@/public/images/icon-twitter-gray.svg";
import LinkedInIconGray from "@/public/images/icon-linkedin-gray.svg";
import YoutubeIconGray from "@/public/images/icon-youtube-gray.svg";
import FacebookIconGray from "@/public/images/icon-facebook-gray.svg";
import TwitchIconGray from "@/public/images/icon-twitch-gray.svg";
import CodewarsIconGray from "@/public/images/icon-codewars-gray.svg";
import FreeCodeCampIconGray from "@/public/images/icon-freecodecamp-gray.svg";
import GitLabIconGray from "@/public/images/icon-gitlab-gray.svg";
import HashnodeIconGray from "@/public/images/icon-hashnode-gray.svg";
import DevToIconGray from "@/public/images/icon-devto-gray.svg";
import StackOverflowIconGray from "@/public/images/icon-stack-overflow-gray.svg";

export const grayIcons: Record<Platform, () => JSX.Element> = {
  Github: GithubIconGray,
  "Frontend Mentor": FrontEndMentorIconGray,
  Twitter: TwitterIconGray,
  LinkedIn: LinkedInIconGray,
  Youtube: YoutubeIconGray,
  Facebook: FacebookIconGray,
  Twitch: TwitchIconGray,
  Codewars: CodewarsIconGray,
  FreeCodeCamp: FreeCodeCampIconGray,
  GitLab: GitLabIconGray,
  Hashnode: HashnodeIconGray,
  "Dev.To": DevToIconGray,
  "Stack Overflow": StackOverflowIconGray,
};

export const platforms: IPlatform[] = [
  { icon: GithubIconGray, name: "Github", defaultValue: "https://github.com/" },
  {
    icon: FrontEndMentorIconGray,
    name: "Frontend Mentor",
    defaultValue: "https://frontendmentor.io/profile/",
  },
  {
    icon: TwitterIconGray,
    name: "Twitter",
    defaultValue: "https://twitter.com/",
  },
  {
    icon: LinkedInIconGray,
    name: "LinkedIn",
    defaultValue: "https://linkedin.com/in/",
  },
  {
    icon: YoutubeIconGray,
    name: "Youtube",
    defaultValue: "https://youtube.com/@",
  },
  {
    icon: FacebookIconGray,
    name: "Facebook",
    defaultValue: "https://facebook.com/",
  },
  {
    icon: TwitchIconGray,
    name: "Twitch",
    defaultValue: "https://twitch.tv/",
  },
  {
    icon: CodewarsIconGray,
    name: "Codewars",
    defaultValue: "https://codewars.com/users/",
  },
  {
    icon: FreeCodeCampIconGray,
    name: "FreeCodeCamp",
    defaultValue: "https://freecodecamp.org/",
  },
  {
    icon: GitLabIconGray,
    name: "GitLab",
    defaultValue: "https://gitlab.com/",
  },
  {
    icon: HashnodeIconGray,
    name: "Hashnode",
    defaultValue: "https://hashnode.com/@",
  },
  {
    icon: DevToIconGray,
    name: "Dev.To",
    defaultValue: "https://dev.to/",
  },
  {
    icon: StackOverfl
```

